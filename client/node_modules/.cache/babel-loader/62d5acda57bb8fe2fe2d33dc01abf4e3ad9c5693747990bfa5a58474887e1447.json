{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabila\\\\Desktop\\\\aksaraku2.0\\\\client\\\\src\\\\components\\\\NggolekiTembung\\\\nt1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport alur from \"../../assets/image/kuis/alur.png\";\nimport tema from \"../../assets/image/kuis/tema.png\";\nimport paraga from \"../../assets/image/kuis/paraga.png\";\nimport latar from \"../../assets/image/kuis/latar.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NggolekiTembang1 = () => {\n  _s();\n  const initialClues = [{\n    word: \"TEMA\",\n    image: tema\n  }, {\n    word: \"PARAGA\",\n    image: paraga\n  }, {\n    word: \"ALUR\",\n    image: alur\n  }, {\n    word: \"LATAR\",\n    image: latar\n  }];\n  const [gridSize, setGridSize] = useState(15);\n  const [grid, setGrid] = useState([]);\n  const [foundWords, setFoundWords] = useState([]);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [clues, setClues] = useState(initialClues);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [timer, setTimer] = useState(null);\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\n  const [score, setScore] = useState(0);\n  const navigate = useNavigate();\n  const createEmptyGrid = () => {\n    return Array.from({\n      length: gridSize\n    }, () => Array.from({\n      length: gridSize\n    }, () => \"\"));\n  };\n  const placeWordsInGrid = grid => {\n    clues.forEach(clue => {\n      const word = clue.word;\n      let placed = false;\n      while (!placed) {\n        const direction = Math.floor(Math.random() * 3); // 0 = horizontal, 1 = vertical, 2 = diagonal\n        const row = Math.floor(Math.random() * gridSize);\n        const col = Math.floor(Math.random() * gridSize);\n        if (canPlaceWord(word, row, col, direction, grid)) {\n          placeWord(word, row, col, direction, grid);\n          placed = true;\n        }\n      }\n    });\n  };\n  const canPlaceWord = (word, row, col, direction, grid) => {\n    if (direction === 0 && col + word.length > gridSize) return false;\n    if (direction === 1 && row + word.length > gridSize) return false;\n    if (direction === 2 && (row + word.length > gridSize || col + word.length > gridSize)) return false;\n    for (let i = 0; i < word.length; i++) {\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n      if (grid[currentRow][currentCol] !== \"\" && grid[currentRow][currentCol] !== word[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const placeWord = (word, row, col, direction, grid) => {\n    for (let i = 0; i < word.length; i++) {\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n      grid[currentRow][currentCol] = word[i];\n    }\n  };\n  const fillGridWithRandomLetters = grid => {\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        if (grid[row][col] === \"\") {\n          grid[row][col] = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const newGrid = createEmptyGrid();\n    placeWordsInGrid(newGrid);\n    fillGridWithRandomLetters(newGrid);\n    setGrid(newGrid);\n    startTimer(); // Start timer when the grid is created\n    return () => clearInterval(timer); // Cleanup on unmount\n  }, [clues, gridSize]);\n  const startTimer = () => {\n    const interval = setInterval(() => {\n      setElapsedTime(prev => prev + 1000);\n    }, 1000);\n    setTimer(interval);\n  };\n  const handleCellClick = (row, col) => {\n    const cellIndex = selectedCells.findIndex(cell => cell.row === row && cell.col === col);\n    if (cellIndex !== -1) {\n      const newSelection = [...selectedCells];\n      newSelection.splice(cellIndex, 1);\n      setSelectedCells(newSelection);\n    } else {\n      setSelectedCells([...selectedCells, {\n        row,\n        col\n      }]);\n    }\n  };\n  const clearSelection = () => {\n    setSelectedCells([]);\n  };\n  useEffect(() => {\n    const selectedWord = selectedCells.map(({\n      row,\n      col\n    }) => grid[row][col]).join(\"\");\n    const foundClue = clues.find(clue => clue.word === selectedWord);\n    if (foundClue) {\n      setFoundWords([...foundWords, foundClue.word]);\n      setSelectedCells([]);\n    }\n  }, [selectedCells]);\n  const allWordsFound = foundWords.length === clues.length;\n  const calculateScore = duration => {\n    return Math.max(0, 100 - Math.floor(duration / 1000)); // Score based on seconds\n  };\n  useEffect(() => {\n    if (allWordsFound) {\n      clearInterval(timer); // Stop the timer when all words are found\n      const calculatedScore = calculateScore(elapsedTime);\n      setScore(calculatedScore);\n      setIsPopupVisible(true); // Show popup\n    }\n  }, [allWordsFound]);\n  const handlePopupAction = action => {\n    setIsPopupVisible(false);\n    if (action === \"next\") {\n      navigate(nextPagePath);\n    } else {\n      navigate(\"/games/nggolekitembung\"); // Adjust to your previous path\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordsearch\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nggoleki Tembung 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Goleki tembung sing cocog karo aksara sing ditampilake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsearch-clues\",\n      children: clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsearch-clue\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"wordsearch-clue-image\",\n          src: clue.image,\n          alt: clue.word,\n          style: {\n            width: \"20px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsearch-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsearch-grid\",\n        style: {\n          \"--grid-size\": gridSize\n        },\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordsearch-row\",\n          children: row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell ${selectedCells.find(c => c.row === rowIndex && c.col === colIndex) ? \"selected\" : \"\"}`,\n            onClick: () => handleCellClick(rowIndex, colIndex),\n            children: letter\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearSelection,\n        children: \"Hapus Pilihan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsearch-found-words\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Tembung:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), foundWords.map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginRight: \"10px\"\n          },\n          children: word\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Waktu: \", Math.floor(elapsedTime / 1000), \" detik\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), isPopupVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Nilai: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePopupAction(\"back\"),\n        children: \"Kembali\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePopupAction(\"next\"),\n        children: \"Level Selanjutnya\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(NggolekiTembang1, \"O3b9NVFYlrEFW5TkmXs4viPUv+0=\", false, function () {\n  return [useNavigate];\n});\n_c = NggolekiTembang1;\nexport default NggolekiTembang1;\nvar _c;\n$RefreshReg$(_c, \"NggolekiTembang1\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","alur","tema","paraga","latar","jsxDEV","_jsxDEV","NggolekiTembang1","_s","initialClues","word","image","gridSize","setGridSize","grid","setGrid","foundWords","setFoundWords","selectedCells","setSelectedCells","clues","setClues","elapsedTime","setElapsedTime","timer","setTimer","isPopupVisible","setIsPopupVisible","score","setScore","navigate","createEmptyGrid","Array","from","length","placeWordsInGrid","forEach","clue","placed","direction","Math","floor","random","row","col","canPlaceWord","placeWord","i","currentRow","currentCol","fillGridWithRandomLetters","String","fromCharCode","newGrid","startTimer","clearInterval","interval","setInterval","prev","handleCellClick","cellIndex","findIndex","cell","newSelection","splice","clearSelection","selectedWord","map","join","foundClue","find","allWordsFound","calculateScore","duration","max","calculatedScore","handlePopupAction","action","nextPagePath","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","style","width","rowIndex","letter","colIndex","c","onClick","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/Nabila/Desktop/aksaraku2.0/client/src/components/NggolekiTembung/nt1.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport alur from \"../../assets/image/kuis/alur.png\";\r\nimport tema from \"../../assets/image/kuis/tema.png\";\r\nimport paraga from \"../../assets/image/kuis/paraga.png\";\r\nimport latar from \"../../assets/image/kuis/latar.png\";\r\n\r\nconst NggolekiTembang1 = () => {\r\n  const initialClues = [\r\n    { word: \"TEMA\", image: tema },\r\n    { word: \"PARAGA\", image: paraga },\r\n    { word: \"ALUR\", image: alur },\r\n    { word: \"LATAR\", image: latar },\r\n  ];\r\n\r\n  const [gridSize, setGridSize] = useState(15);\r\n  const [grid, setGrid] = useState([]);\r\n  const [foundWords, setFoundWords] = useState([]);\r\n  const [selectedCells, setSelectedCells] = useState([]);\r\n  const [clues, setClues] = useState(initialClues);\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [timer, setTimer] = useState(null);\r\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const navigate = useNavigate();\r\n\r\n  const createEmptyGrid = () => {\r\n    return Array.from({ length: gridSize }, () =>\r\n      Array.from({ length: gridSize }, () => \"\")\r\n    );\r\n  };\r\n\r\n  const placeWordsInGrid = (grid) => {\r\n    clues.forEach((clue) => {\r\n      const word = clue.word;\r\n      let placed = false;\r\n      while (!placed) {\r\n        const direction = Math.floor(Math.random() * 3); // 0 = horizontal, 1 = vertical, 2 = diagonal\r\n        const row = Math.floor(Math.random() * gridSize);\r\n        const col = Math.floor(Math.random() * gridSize);\r\n\r\n        if (canPlaceWord(word, row, col, direction, grid)) {\r\n          placeWord(word, row, col, direction, grid);\r\n          placed = true;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const canPlaceWord = (word, row, col, direction, grid) => {\r\n    if (direction === 0 && col + word.length > gridSize) return false;\r\n    if (direction === 1 && row + word.length > gridSize) return false;\r\n    if (\r\n      direction === 2 &&\r\n      (row + word.length > gridSize || col + word.length > gridSize)\r\n    )\r\n      return false;\r\n\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      if (\r\n        grid[currentRow][currentCol] !== \"\" &&\r\n        grid[currentRow][currentCol] !== word[i]\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const placeWord = (word, row, col, direction, grid) => {\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      grid[currentRow][currentCol] = word[i];\r\n    }\r\n  };\r\n\r\n  const fillGridWithRandomLetters = (grid) => {\r\n    for (let row = 0; row < gridSize; row++) {\r\n      for (let col = 0; col < gridSize; col++) {\r\n        if (grid[row][col] === \"\") {\r\n          grid[row][col] = String.fromCharCode(\r\n            65 + Math.floor(Math.random() * 26)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const newGrid = createEmptyGrid();\r\n    placeWordsInGrid(newGrid);\r\n    fillGridWithRandomLetters(newGrid);\r\n    setGrid(newGrid);\r\n    startTimer(); // Start timer when the grid is created\r\n    return () => clearInterval(timer); // Cleanup on unmount\r\n  }, [clues, gridSize]);\r\n\r\n  const startTimer = () => {\r\n    const interval = setInterval(() => {\r\n      setElapsedTime((prev) => prev + 1000);\r\n    }, 1000);\r\n    setTimer(interval);\r\n  };\r\n\r\n  const handleCellClick = (row, col) => {\r\n    const cellIndex = selectedCells.findIndex(\r\n      (cell) => cell.row === row && cell.col === col\r\n    );\r\n\r\n    if (cellIndex !== -1) {\r\n      const newSelection = [...selectedCells];\r\n      newSelection.splice(cellIndex, 1);\r\n      setSelectedCells(newSelection);\r\n    } else {\r\n      setSelectedCells([...selectedCells, { row, col }]);\r\n    }\r\n  };\r\n\r\n  const clearSelection = () => {\r\n    setSelectedCells([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedWord = selectedCells\r\n      .map(({ row, col }) => grid[row][col])\r\n      .join(\"\");\r\n    const foundClue = clues.find((clue) => clue.word === selectedWord);\r\n\r\n    if (foundClue) {\r\n      setFoundWords([...foundWords, foundClue.word]);\r\n      setSelectedCells([]);\r\n    }\r\n  }, [selectedCells]);\r\n\r\n  const allWordsFound = foundWords.length === clues.length;\r\n\r\n  const calculateScore = (duration) => {\r\n    return Math.max(0, 100 - Math.floor(duration / 1000)); // Score based on seconds\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (allWordsFound) {\r\n      clearInterval(timer); // Stop the timer when all words are found\r\n      const calculatedScore = calculateScore(elapsedTime);\r\n      setScore(calculatedScore);\r\n      setIsPopupVisible(true); // Show popup\r\n    }\r\n  }, [allWordsFound]);\r\n\r\n  const handlePopupAction = (action) => {\r\n    setIsPopupVisible(false);\r\n    if (action === \"next\") {\r\n      navigate(nextPagePath);\r\n    } else {\r\n      navigate(\"/games/nggolekitembung\"); // Adjust to your previous path\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wordsearch\">\r\n      <h1>Nggoleki Tembung 1</h1>\r\n      <h2>Goleki tembung sing cocog karo aksara sing ditampilake</h2>\r\n\r\n      <div className=\"wordsearch-clues\">\r\n        {clues.map((clue, index) => (\r\n          <div key={index} className=\"wordsearch-clue\">\r\n            <img\r\n              className=\"wordsearch-clue-image\"\r\n              src={clue.image}\r\n              alt={clue.word}\r\n              style={{ width: \"20px\" }}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"wordsearch-container\">\r\n        <div className=\"wordsearch-grid\" style={{ \"--grid-size\": gridSize }}>\r\n          {grid.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"wordsearch-row\">\r\n              {row.map((letter, colIndex) => (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`cell ${\r\n                    selectedCells.find(\r\n                      (c) => c.row === rowIndex && c.col === colIndex\r\n                    )\r\n                      ? \"selected\"\r\n                      : \"\"\r\n                  }`}\r\n                  onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                >\r\n                  {letter}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <button onClick={clearSelection}>Hapus Pilihan</button>\r\n\r\n        <div className=\"wordsearch-found-words\">\r\n          <h2>Tembung:</h2>\r\n          {foundWords.map((word, index) => (\r\n            <span key={index} style={{ marginRight: \"10px\" }}>\r\n              {word}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Timer display */}\r\n      <div className=\"timer\">\r\n        <h3>Waktu: {Math.floor(elapsedTime / 1000)} detik</h3>\r\n      </div>\r\n\r\n      {/* Popup for score */}\r\n      {isPopupVisible && (\r\n        <div className=\"popup\">\r\n          <h2>Nilai: {score}</h2>\r\n          <button onClick={() => handlePopupAction(\"back\")}>Kembali</button>\r\n          <button onClick={() => handlePopupAction(\"next\")}>\r\n            Level Selanjutnya\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NggolekiTembang1;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}