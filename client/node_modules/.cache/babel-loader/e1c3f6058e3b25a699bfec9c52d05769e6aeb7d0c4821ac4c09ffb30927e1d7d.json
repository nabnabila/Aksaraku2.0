{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabila\\\\Desktop\\\\aksaraku2.0\\\\client\\\\src\\\\components\\\\Memory\\\\m1.js\",\n  _s = $RefreshSig$();\nimport ha from \"../../assets/image/aksara1/ha.png\";\nimport ra from \"../../assets/image/aksara1/ra.png\";\nimport sa from \"../../assets/image/aksara1/sa.png\";\nimport ya from \"../../assets/image/aksara1/ya.png\";\nimport ba from \"../../assets/image/aksara1/ba.png\";\nimport ja from \"../../assets/image/aksara1/ja.png\";\nimport cover1 from \"../../assets/image/Nglegena.png\";\nimport { useEffect, useState } from \"react\";\nimport \"../../style/memorycard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MemoryGames1() {\n  _s();\n  const cardImage = [{\n    image: ha\n  }, {\n    image: ra\n  }, {\n    image: sa\n  }, {\n    image: ya\n  }, {\n    image: ba\n  }, {\n    image: ja\n  }];\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [timer, setTimer] = useState(null);\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\n  const [score, setScore] = useState(0);\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImage, ...cardImage].sort(() => Math.random() - 0.5).map(card => ({\n      ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0);\n    setFlippedCards([]);\n    setElapsedTime(0);\n    setScore(0);\n    setIsPopupVisible(false);\n    startTimer(); // Start the timer when shuffling\n  };\n  const handleClick = card => {\n    if (flippedCards.includes(card.id) || choiceTwo) return;\n    if (choiceOne) {\n      setChoiceTwo(card);\n      setFlippedCards(prev => [...prev, card.id]);\n    } else {\n      setChoiceOne(card);\n      setFlippedCards(prev => [...prev, card.id]);\n    }\n  };\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.image === choiceTwo.image) {\n        resetTurn();\n      } else {\n        setTimeout(() => {\n          setFlippedCards(prev => prev.filter(id => id !== choiceOne.id && id !== choiceTwo.id));\n          resetTurn();\n        }, 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    if (flippedCards.length === cards.length) {\n      clearInterval(timer); // Stop the timer\n      calculateScore(); // Calculate score when all pairs are found\n    }\n  };\n  const startTimer = () => {\n    const newTimer = setInterval(() => {\n      setElapsedTime(prev => prev + 1);\n    }, 1000);\n    setTimer(newTimer);\n  };\n  const calculateScore = () => {\n    const finalScore = Math.max(0, 100 - Math.floor(turns * 10) - Math.floor(elapsedTime));\n    setScore(finalScore);\n    setIsPopupVisible(true);\n  };\n  const handlePopupAction = () => {\n    // Reset game or navigate as needed\n    shuffleCards();\n  };\n  useEffect(() => {\n    return () => clearInterval(timer); // Cleanup on unmount\n  }, [timer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-header\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"card-title\",\n      children: \"Memory 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"card-click-button\",\n      onClick: shuffleCards,\n      children: \"Atur Kartu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Waktu: \", elapsedTime, \" detik\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-image\",\n          children: flippedCards.includes(card.id) ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: card.image,\n            alt: \"card front\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n            src: cover1,\n            onClick: () => handleClick(card),\n            alt: \"cover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), isPopupVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Skor Akhir: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePopupAction,\n        children: \"Main Lagi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(MemoryGames1, \"if1VvKYizePrfMA8KdMW1IGx3Cs=\");\n_c = MemoryGames1;\nexport default MemoryGames1;\nvar _c;\n$RefreshReg$(_c, \"MemoryGames1\");","map":{"version":3,"names":["ha","ra","sa","ya","ba","ja","cover1","useEffect","useState","jsxDEV","_jsxDEV","MemoryGames1","_s","cardImage","image","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","flippedCards","setFlippedCards","elapsedTime","setElapsedTime","timer","setTimer","isPopupVisible","setIsPopupVisible","score","setScore","shuffleCards","shuffledCards","sort","Math","random","map","card","id","startTimer","handleClick","includes","prev","resetTurn","setTimeout","filter","prevTurns","length","clearInterval","calculateScore","newTimer","setInterval","finalScore","max","floor","handlePopupAction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Nabila/Desktop/aksaraku2.0/client/src/components/Memory/m1.js"],"sourcesContent":["import ha from \"../../assets/image/aksara1/ha.png\";\r\nimport ra from \"../../assets/image/aksara1/ra.png\";\r\nimport sa from \"../../assets/image/aksara1/sa.png\";\r\nimport ya from \"../../assets/image/aksara1/ya.png\";\r\nimport ba from \"../../assets/image/aksara1/ba.png\";\r\nimport ja from \"../../assets/image/aksara1/ja.png\";\r\nimport cover1 from \"../../assets/image/Nglegena.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"../../style/memorycard.css\";\r\n\r\nfunction MemoryGames1() {\r\n  const cardImage = [\r\n    { image: ha },\r\n    { image: ra },\r\n    { image: sa },\r\n    { image: ya },\r\n    { image: ba },\r\n    { image: ja },\r\n  ];\r\n\r\n  const [cards, setCards] = useState([]);\r\n  const [turns, setTurns] = useState(0);\r\n  const [choiceOne, setChoiceOne] = useState(null);\r\n  const [choiceTwo, setChoiceTwo] = useState(null);\r\n  const [flippedCards, setFlippedCards] = useState([]);\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [timer, setTimer] = useState(null);\r\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const shuffleCards = () => {\r\n    const shuffledCards = [...cardImage, ...cardImage]\r\n      .sort(() => Math.random() - 0.5)\r\n      .map((card) => ({ ...card, id: Math.random() }));\r\n\r\n    setCards(shuffledCards);\r\n    setTurns(0);\r\n    setFlippedCards([]);\r\n    setElapsedTime(0);\r\n    setScore(0);\r\n    setIsPopupVisible(false);\r\n    startTimer(); // Start the timer when shuffling\r\n  };\r\n\r\n  const handleClick = (card) => {\r\n    if (flippedCards.includes(card.id) || choiceTwo) return;\r\n    if (choiceOne) {\r\n      setChoiceTwo(card);\r\n      setFlippedCards((prev) => [...prev, card.id]);\r\n    } else {\r\n      setChoiceOne(card);\r\n      setFlippedCards((prev) => [...prev, card.id]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (choiceOne && choiceTwo) {\r\n      if (choiceOne.image === choiceTwo.image) {\r\n        resetTurn();\r\n      } else {\r\n        setTimeout(() => {\r\n          setFlippedCards((prev) =>\r\n            prev.filter((id) => id !== choiceOne.id && id !== choiceTwo.id)\r\n          );\r\n          resetTurn();\r\n        }, 1000);\r\n      }\r\n    }\r\n  }, [choiceOne, choiceTwo]);\r\n\r\n  const resetTurn = () => {\r\n    setChoiceOne(null);\r\n    setChoiceTwo(null);\r\n    setTurns((prevTurns) => prevTurns + 1);\r\n    if (flippedCards.length === cards.length) {\r\n      clearInterval(timer); // Stop the timer\r\n      calculateScore(); // Calculate score when all pairs are found\r\n    }\r\n  };\r\n\r\n  const startTimer = () => {\r\n    const newTimer = setInterval(() => {\r\n      setElapsedTime((prev) => prev + 1);\r\n    }, 1000);\r\n    setTimer(newTimer);\r\n  };\r\n\r\n  const calculateScore = () => {\r\n    const finalScore = Math.max(\r\n      0,\r\n      100 - Math.floor(turns * 10) - Math.floor(elapsedTime)\r\n    );\r\n    setScore(finalScore);\r\n    setIsPopupVisible(true);\r\n  };\r\n\r\n  const handlePopupAction = () => {\r\n    // Reset game or navigate as needed\r\n    shuffleCards();\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => clearInterval(timer); // Cleanup on unmount\r\n  }, [timer]);\r\n\r\n  return (\r\n    <div className=\"card-header\">\r\n      <h1 className=\"card-title\">Memory 1</h1>\r\n      <button className=\"card-click-button\" onClick={shuffleCards}>\r\n        Atur Kartu\r\n      </button>\r\n      <div className=\"timer\">\r\n        <h3>Waktu: {elapsedTime} detik</h3>\r\n      </div>\r\n      <div className=\"card-grid\">\r\n        {cards.map((card) => (\r\n          <div className=\"card\" key={card.id}>\r\n            <div className=\"card-image\">\r\n              {flippedCards.includes(card.id) ? (\r\n                <img src={card.image} alt=\"card front\" />\r\n              ) : (\r\n                <img\r\n                  src={cover1}\r\n                  onClick={() => handleClick(card)}\r\n                  alt=\"cover\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Popup for score */}\r\n      {isPopupVisible && (\r\n        <div className=\"popup\">\r\n          <h2>Skor Akhir: {score}</h2>\r\n          <button onClick={handlePopupAction}>Main Lagi</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemoryGames1;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}