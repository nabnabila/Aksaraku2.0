{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabila\\\\Desktop\\\\aksaraku2.0\\\\client\\\\src\\\\components\\\\NggolekiTembung\\\\nt1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport alur from \"../../assets/image/kuis/alur.png\";\nimport tema from \"../../assets/image/kuis/tema.png\";\nimport paraga from \"../../assets/image/kuis/paraga.png\";\nimport latar from \"../../assets/image/kuis/latar.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NggolekiTembang1 = ({\n  nextPagePath\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const initialClues = [{\n    word: \"TEMA\",\n    image: tema\n  }, {\n    word: \"PARAGA\",\n    image: paraga\n  }, {\n    word: \"ALUR\",\n    image: alur\n  }, {\n    word: \"LATAR\",\n    image: latar\n  }];\n  const [gridSize, setGridSize] = useState(15);\n  const [grid, setGrid] = useState([]);\n  const [foundWords, setFoundWords] = useState([]);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [timer, setTimer] = useState(null);\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    const newGrid = createEmptyGrid();\n    placeWordsInGrid(newGrid);\n    fillGridWithRandomLetters(newGrid);\n    setGrid(newGrid);\n    startTimer();\n    return () => clearInterval(timer); // Cleanup on unmount\n  }, [gridSize]);\n  const createEmptyGrid = () => {\n    return Array.from({\n      length: gridSize\n    }, () => Array.from({\n      length: gridSize\n    }, () => \"\"));\n  };\n  const placeWordsInGrid = grid => {\n    initialClues.forEach(clue => {\n      const word = clue.word;\n      let placed = false;\n      while (!placed) {\n        const direction = Math.floor(Math.random() * 3);\n        const row = Math.floor(Math.random() * gridSize);\n        const col = Math.floor(Math.random() * gridSize);\n        if (canPlaceWord(word, row, col, direction, grid)) {\n          placeWord(word, row, col, direction, grid);\n          placed = true;\n        }\n      }\n    });\n  };\n  const canPlaceWord = (word, row, col, direction, grid) => {\n    if (direction === 0 && col + word.length > gridSize) return false; // Horizontal\n    if (direction === 1 && row + word.length > gridSize) return false; // Vertical\n    if (direction === 2 && (row + word.length > gridSize || col + word.length > gridSize)) return false; // Diagonal\n\n    for (let i = 0; i < word.length; i++) {\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n      if (grid[currentRow][currentCol] !== \"\" && grid[currentRow][currentCol] !== word[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const placeWord = (word, row, col, direction, grid) => {\n    for (let i = 0; i < word.length; i++) {\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n      grid[currentRow][currentCol] = word[i];\n    }\n  };\n  const fillGridWithRandomLetters = grid => {\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        if (grid[row][col] === \"\") {\n          grid[row][col] = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n        }\n      }\n    }\n  };\n  const startTimer = () => {\n    const interval = setInterval(() => {\n      setElapsedTime(prev => prev + 1000);\n    }, 1000);\n    setTimer(interval);\n  };\n  const handleCellClick = (row, col) => {\n    const cellIndex = selectedCells.findIndex(cell => cell.row === row && cell.col === col);\n    if (cellIndex !== -1) {\n      const newSelection = [...selectedCells];\n      newSelection.splice(cellIndex, 1);\n      setSelectedCells(newSelection);\n    } else {\n      setSelectedCells([...selectedCells, {\n        row,\n        col\n      }]);\n    }\n  };\n  const clearSelection = () => {\n    setSelectedCells([]);\n  };\n  useEffect(() => {\n    const selectedWord = selectedCells.map(({\n      row,\n      col\n    }) => grid[row][col]).join(\"\");\n\n    // Check if the selected word matches any clue\n    const foundClue = initialClues.find(clue => clue.word === selectedWord);\n    if (foundClue && !foundWords.includes(foundClue.word)) {\n      setFoundWords(prev => [...prev, foundClue.word]);\n      setSelectedCells([]);\n    }\n  }, [selectedCells]);\n  const allWordsFound = foundWords.length === initialClues.length;\n  const calculateScore = duration => {\n    return Math.max(0, 100 - Math.floor(duration / 1000) * 0.2);\n  };\n  useEffect(() => {\n    if (allWordsFound) {\n      clearInterval(timer); // Stop the timer when all words are found\n      const calculatedScore = calculateScore(elapsedTime);\n      setScore(calculatedScore);\n      setIsPopupVisible(true); // Show popup\n    }\n  }, [allWordsFound, elapsedTime]);\n  const handlePopupAction = action => {\n    setIsPopupVisible(false);\n    if (action === \"next\") {\n      navigate(nextPagePath);\n    } else {\n      navigate(\"/games/nggolekitembung\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordsearch\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nggoleki Tembung 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Goleki tembung sing cocog karo aksara sing ditampilake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsearch-clues\",\n      children: initialClues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsearch-clue\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"wordsearch-clue-image\",\n          src: clue.image,\n          alt: clue.word,\n          style: {\n            width: \"20px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsearch-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsearch-grid\",\n        style: {\n          \"--grid-size\": gridSize\n        },\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordsearch-row\",\n          children: row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell ${selectedCells.find(c => c.row === rowIndex && c.col === colIndex) ? \"selected\" : \"\"}`,\n            onClick: () => handleCellClick(rowIndex, colIndex),\n            children: letter\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearSelection,\n        children: \"Hapus Pilihan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsearch-found-words\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Tembung:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), foundWords.map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginRight: \"10px\"\n          },\n          children: word\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Waktu: \", Math.floor(elapsedTime / 1000), \" detik\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), isPopupVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Nilai: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-popup-button\",\n        onClick: () => handlePopupAction(\"back\"),\n        children: \"Kembali\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-popup-button\",\n        onClick: () => handlePopupAction(\"next\"),\n        children: \"Level Selanjutnya\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(NggolekiTembang1, \"9YAqZnSiC4iboSjRuXAzIOor+ZM=\", false, function () {\n  return [useNavigate];\n});\n_c = NggolekiTembang1;\nexport default NggolekiTembang1;\nvar _c;\n$RefreshReg$(_c, \"NggolekiTembang1\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","alur","tema","paraga","latar","jsxDEV","_jsxDEV","NggolekiTembang1","nextPagePath","_s","navigate","initialClues","word","image","gridSize","setGridSize","grid","setGrid","foundWords","setFoundWords","selectedCells","setSelectedCells","elapsedTime","setElapsedTime","timer","setTimer","isPopupVisible","setIsPopupVisible","score","setScore","newGrid","createEmptyGrid","placeWordsInGrid","fillGridWithRandomLetters","startTimer","clearInterval","Array","from","length","forEach","clue","placed","direction","Math","floor","random","row","col","canPlaceWord","placeWord","i","currentRow","currentCol","String","fromCharCode","interval","setInterval","prev","handleCellClick","cellIndex","findIndex","cell","newSelection","splice","clearSelection","selectedWord","map","join","foundClue","find","includes","allWordsFound","calculateScore","duration","max","calculatedScore","handlePopupAction","action","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","style","width","rowIndex","letter","colIndex","c","onClick","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/Nabila/Desktop/aksaraku2.0/client/src/components/NggolekiTembung/nt1.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport alur from \"../../assets/image/kuis/alur.png\";\r\nimport tema from \"../../assets/image/kuis/tema.png\";\r\nimport paraga from \"../../assets/image/kuis/paraga.png\";\r\nimport latar from \"../../assets/image/kuis/latar.png\";\r\n\r\nconst NggolekiTembang1 = ({ nextPagePath }) => {\r\n  const navigate = useNavigate();\r\n  const initialClues = [\r\n    { word: \"TEMA\", image: tema },\r\n    { word: \"PARAGA\", image: paraga },\r\n    { word: \"ALUR\", image: alur },\r\n    { word: \"LATAR\", image: latar },\r\n  ];\r\n\r\n  const [gridSize, setGridSize] = useState(15);\r\n  const [grid, setGrid] = useState([]);\r\n  const [foundWords, setFoundWords] = useState([]);\r\n  const [selectedCells, setSelectedCells] = useState([]);\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [timer, setTimer] = useState(null);\r\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const newGrid = createEmptyGrid();\r\n    placeWordsInGrid(newGrid);\r\n    fillGridWithRandomLetters(newGrid);\r\n    setGrid(newGrid);\r\n    startTimer();\r\n\r\n    return () => clearInterval(timer); // Cleanup on unmount\r\n  }, [gridSize]);\r\n\r\n  const createEmptyGrid = () => {\r\n    return Array.from({ length: gridSize }, () =>\r\n      Array.from({ length: gridSize }, () => \"\")\r\n    );\r\n  };\r\n\r\n  const placeWordsInGrid = (grid) => {\r\n    initialClues.forEach((clue) => {\r\n      const word = clue.word;\r\n      let placed = false;\r\n      while (!placed) {\r\n        const direction = Math.floor(Math.random() * 3);\r\n        const row = Math.floor(Math.random() * gridSize);\r\n        const col = Math.floor(Math.random() * gridSize);\r\n\r\n        if (canPlaceWord(word, row, col, direction, grid)) {\r\n          placeWord(word, row, col, direction, grid);\r\n          placed = true;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const canPlaceWord = (word, row, col, direction, grid) => {\r\n    if (direction === 0 && col + word.length > gridSize) return false; // Horizontal\r\n    if (direction === 1 && row + word.length > gridSize) return false; // Vertical\r\n    if (\r\n      direction === 2 &&\r\n      (row + word.length > gridSize || col + word.length > gridSize)\r\n    )\r\n      return false; // Diagonal\r\n\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      if (\r\n        grid[currentRow][currentCol] !== \"\" &&\r\n        grid[currentRow][currentCol] !== word[i]\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const placeWord = (word, row, col, direction, grid) => {\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      grid[currentRow][currentCol] = word[i];\r\n    }\r\n  };\r\n\r\n  const fillGridWithRandomLetters = (grid) => {\r\n    for (let row = 0; row < gridSize; row++) {\r\n      for (let col = 0; col < gridSize; col++) {\r\n        if (grid[row][col] === \"\") {\r\n          grid[row][col] = String.fromCharCode(\r\n            65 + Math.floor(Math.random() * 26)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const startTimer = () => {\r\n    const interval = setInterval(() => {\r\n      setElapsedTime((prev) => prev + 1000);\r\n    }, 1000);\r\n    setTimer(interval);\r\n  };\r\n\r\n  const handleCellClick = (row, col) => {\r\n    const cellIndex = selectedCells.findIndex(\r\n      (cell) => cell.row === row && cell.col === col\r\n    );\r\n\r\n    if (cellIndex !== -1) {\r\n      const newSelection = [...selectedCells];\r\n      newSelection.splice(cellIndex, 1);\r\n      setSelectedCells(newSelection);\r\n    } else {\r\n      setSelectedCells([...selectedCells, { row, col }]);\r\n    }\r\n  };\r\n\r\n  const clearSelection = () => {\r\n    setSelectedCells([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedWord = selectedCells\r\n      .map(({ row, col }) => grid[row][col])\r\n      .join(\"\");\r\n\r\n    // Check if the selected word matches any clue\r\n    const foundClue = initialClues.find((clue) => clue.word === selectedWord);\r\n\r\n    if (foundClue && !foundWords.includes(foundClue.word)) {\r\n      setFoundWords((prev) => [...prev, foundClue.word]);\r\n      setSelectedCells([]);\r\n    }\r\n  }, [selectedCells]);\r\n\r\n  const allWordsFound = foundWords.length === initialClues.length;\r\n\r\n  const calculateScore = (duration) => {\r\n    return Math.max(0, 100 - Math.floor(duration / 1000) * 0.2);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (allWordsFound) {\r\n      clearInterval(timer); // Stop the timer when all words are found\r\n      const calculatedScore = calculateScore(elapsedTime);\r\n      setScore(calculatedScore);\r\n      setIsPopupVisible(true); // Show popup\r\n    }\r\n  }, [allWordsFound, elapsedTime]);\r\n\r\n  const handlePopupAction = (action) => {\r\n    setIsPopupVisible(false);\r\n    if (action === \"next\") {\r\n      navigate(nextPagePath);\r\n    } else {\r\n      navigate(\"/games/nggolekitembung\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wordsearch\">\r\n      <h1>Nggoleki Tembung 1</h1>\r\n      <h2>Goleki tembung sing cocog karo aksara sing ditampilake</h2>\r\n\r\n      <div className=\"wordsearch-clues\">\r\n        {initialClues.map((clue, index) => (\r\n          <div key={index} className=\"wordsearch-clue\">\r\n            <img\r\n              className=\"wordsearch-clue-image\"\r\n              src={clue.image}\r\n              alt={clue.word}\r\n              style={{ width: \"20px\" }}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"wordsearch-container\">\r\n        <div className=\"wordsearch-grid\" style={{ \"--grid-size\": gridSize }}>\r\n          {grid.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"wordsearch-row\">\r\n              {row.map((letter, colIndex) => (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`cell ${\r\n                    selectedCells.find(\r\n                      (c) => c.row === rowIndex && c.col === colIndex\r\n                    )\r\n                      ? \"selected\"\r\n                      : \"\"\r\n                  }`}\r\n                  onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                >\r\n                  {letter}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <button onClick={clearSelection}>Hapus Pilihan</button>\r\n\r\n        <div className=\"wordsearch-found-words\">\r\n          <h2>Tembung:</h2>\r\n          {foundWords.map((word, index) => (\r\n            <span key={index} style={{ marginRight: \"10px\" }}>\r\n              {word}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Timer display */}\r\n      <div className=\"timer\">\r\n        <h3>Waktu: {Math.floor(elapsedTime / 1000)} detik</h3>\r\n      </div>\r\n\r\n      {/* Popup for score */}\r\n      {isPopupVisible && (\r\n        <div className=\"search-popup\">\r\n          <h2>Nilai: {score}</h2>\r\n          <button\r\n            className=\"search-popup-button\"\r\n            onClick={() => handlePopupAction(\"back\")}\r\n          >\r\n            Kembali\r\n          </button>\r\n          <button\r\n            className=\"search-popup-button\"\r\n            onClick={() => handlePopupAction(\"next\")}\r\n          >\r\n            Level Selanjutnya\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NggolekiTembang1;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}